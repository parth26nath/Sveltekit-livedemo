import { Argument, ParamEntity, TypeResolver } from '.';
import { Bytes, StructObject, SupportedParamType } from './scryptTypes';
/**
 * little-endian signed magnitude to int
 */
export declare function hex2int(hex: string): bigint;
export declare function hex2bool(hex: string): boolean;
export declare function hex2bytes(hex: string): Bytes;
export declare function deserializer(type: string, hex: string): SupportedParamType;
export type DeserializeOption = {
    state: boolean;
};
export declare function createStruct(resolver: TypeResolver, param: ParamEntity, opcodesMap: Map<string, string>, options: DeserializeOption): StructObject;
export declare function createLibrary(resolver: TypeResolver, param: ParamEntity, opcodesMap: Map<string, string>, options: DeserializeOption): Array<SupportedParamType> | Record<string, SupportedParamType>;
export declare function createArray(resolver: TypeResolver, type: string, name: string, opcodesMap: Map<string, string>, options: DeserializeOption): SupportedParamType;
export declare function deserializeArgfromHex(resolver: TypeResolver, arg: Argument, opcodesMap: Map<string, string>, options: DeserializeOption): Argument;
