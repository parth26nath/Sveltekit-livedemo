"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeucronWalletAPI = void 0;
const axios_1 = __importDefault(require("axios"));
class NeucronWalletAPI {
    constructor(authToken) {
        this.address = null;
        this.publickey = null;
        this.getAddress = async () => {
            if (this.address != null) {
                return this.address;
            }
            return await this.requestAccount();
        };
        this.getBsvBalance = async () => {
            try {
                const response = await axios_1.default.get('https://dev.neucron.io/v1/scrypt/balance', {
                    headers: {
                        accept: 'application/json',
                        Authorization: this.authToken,
                    },
                });
                const responseBody = response.data;
                // Check if the response contains the expected structure.
                if (responseBody.address && responseBody.balance) {
                    return responseBody;
                }
                else {
                    throw new Error('Invalid response structure.');
                }
            }
            catch (error) {
                //@ts-ignore
                throw new Error('Failed to get BSV balance: ' + error.message);
            }
        };
        this.getPublicKey = async () => {
            if (this.publickey != null) {
                return this.publickey;
            }
            let retries = 3; // Number of retry attempts
            while (retries > 0) {
                try {
                    const response = await axios_1.default.get('https://dev.neucron.io/v1/scrypt/key', {
                        headers: {
                            accept: 'application/json',
                            Authorization: this.authToken // Replace with your authorization token
                        },
                    });
                    const responseBody = response.data;
                    if (responseBody.public_key) {
                        this.publickey = responseBody.public_key;
                        return responseBody.public_key;
                    }
                    else {
                        throw new Error('PublicKey not found in the response.');
                    }
                }
                catch (error) {
                    // console.error('Error:', error.message);
                    retries--; // Decrement the number of retries
                    if (retries === 0) {
                        throw new Error('Failed to request PublicKey after multiple retries.');
                    }
                    // Wait for a moment before retrying (you can adjust the delay)
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        };
        this.requestAccount = async () => {
            if (this.address != null) {
                return this.address;
            }
            let retries = 3; // Number of retry attempts
            while (retries > 0) {
                try {
                    const response = await axios_1.default.get('https://dev.neucron.io/v1/scrypt/key', {
                        headers: {
                            accept: 'application/json',
                            Authorization: this.authToken,
                        },
                    });
                    const responseBody = response.data;
                    if (responseBody.address !== "") {
                        this.address = responseBody.address;
                        //console.error(responseBody.address);
                        return responseBody.address;
                    }
                    else {
                        throw new Error('Address not found in the response.');
                    }
                }
                catch (error) {
                    //@ts-ignore
                    console.error('Error:', error.message);
                    retries--; // Decrement the number of retries
                    if (retries === 0) {
                        throw new Error('Failed to request account after multiple retries.');
                    }
                    // Wait for a moment before retrying (you can adjust the delay)
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        };
        this.signMessage = async (msg) => {
            try {
                const requestBody = {
                    message: msg,
                };
                const response = await axios_1.default.post('https://dev.neucron.io/v1/tx/mesign', requestBody, {
                    headers: {
                        accept: 'application/json',
                        Authorization: this.authToken,
                        'Content-Type': 'application/json',
                    },
                });
                const responseBody = response.data;
                if (responseBody.data && responseBody.data.signature_b64) {
                    return responseBody.data.signature_b64;
                }
                else {
                    throw new Error('Invalid response structure.');
                }
            }
            catch (error) {
                //@ts-ignore
                throw new Error('Failed to sign the message: ' + error.message);
            }
        };
        this.signTransaction = async (txHex, inputInfos) => {
            try {
                const requestBody = {
                    address: 'string',
                    inputInfos,
                    sighashType: 0,
                    txHex: 'string', // Replace with the actual txHex.
                };
                const response = await axios_1.default.post('https://dev.neucron.io/v1/scrypt/signtxn', requestBody, {
                    headers: {
                        accept: 'application/json',
                        Authorization: this.authToken,
                        'Content-Type': 'application/json',
                    },
                });
                const responseBody = response.data;
                if (responseBody.SigResult) {
                    return responseBody.SigResult;
                }
                else {
                    throw new Error('Invalid response structure.');
                }
                //@ts-ignore
            }
            catch (error) {
                //@ts-ignore
                throw new Error('Failed to sign transaction: ' + error.message);
            }
        };
        this.signTx = async (options) => {
            let retries = 3; // Number of retry attempts
            while (retries > 0) {
                try {
                    const requestBody = options;
                    const response = await axios_1.default.post('https://dev.neucron.io/v1/scrypt/signtxl', requestBody, {
                        headers: {
                            accept: 'application/json',
                            Authorization: this.authToken,
                            'Content-Type': 'application/json',
                        },
                    });
                    const responseBody = response.data;
                    if (responseBody.sigList) {
                        return { sigList: responseBody.sigList };
                    }
                    else {
                        throw new Error('Invalid response structure.');
                    }
                    //@ts-ignore
                }
                catch (error) {
                    //@ts-ignore
                    console.error('Error:', error.message);
                    retries--; // Decrement the number of retries
                    if (retries === 0) {
                        throw new Error('Failed to sign the transaction after multiple retries.');
                    }
                    // Wait for a moment before retrying (you can adjust the delay)
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
            // Default return value in case of an error
            return { sigList: [] };
        };
        this.authToken = authToken !== null && authToken !== void 0 ? authToken : '';
        this.address = null;
        this.publickey = null;
    }
    exitAccount() {
        this.authToken = '';
    }
    isConnect() {
        if (this.authToken !== undefined &&
            this.authToken !== '' &&
            this.authToken !== null) {
            return Promise.resolve(true);
        }
        return Promise.resolve(false);
    }
}
exports.NeucronWalletAPI = NeucronWalletAPI;
