/// <reference types="node" />
/**
 * Rabin signature result
 */
export interface RabinSignature {
    signature: bigint;
    paddingByteCount: number;
}
/**
 * Rabin private key
 */
export interface RabinPrivateKey {
    p: bigint;
    q: bigint;
}
/**
 * Rabin public key
 */
export type RabinPublicKey = bigint;
export declare class Rabin {
    static readonly PaddingByte: Buffer;
    securityLevel: number;
    /**
     * RabinSignature
     * @param {*} securityLevel : multiple of 512 bits.
     */
    constructor(securityLevel?: number);
    greatestCommonDivisor(a: bigint, b: bigint): bigint;
    powerMod(base: bigint, exponent: bigint, modulus: bigint): bigint;
    bin2hash(bytes: Buffer): Buffer;
    rabinHashBytes(bytes: Buffer): bigint;
    calculateNextPrime(p: bigint): bigint;
    getPrimeNumber(p: bigint): bigint;
    root(dataBuffer: Buffer, p: bigint, q: bigint, nRabin: bigint): RabinSignature;
    /**
     * Calculates Rabin public key from private key
     */
    privKeyToPubKey(privKey: RabinPrivateKey): RabinPublicKey;
    /**
     * Generates Rabin private key
     */
    generatePrivKey(): RabinPrivateKey;
    /**
     * Generates Rabin private key from a PRNG seed
     * @param {Buffer} seed
     * @returns {RabinPrivateKey} Rabin private key
     */
    generatePrivKeyFromSeed(seed: Buffer): RabinPrivateKey;
    /**
     * Creates a Rabin signature of hexadecimal data with a given private key
     * @param {string} dataHex Hexadecimal data string value
     * @param {RabinPrivateKey} privKey Rabin private key
     * @returns {RabinSignature} Rabin signature result
     */
    sign(dataHex: string, privKey: RabinPrivateKey): RabinSignature;
    /**
     * Verifies a Rabin signature of hexadecimal data with the given public key
     * @param {string} dataHex Hexadecimal data string value
     * @param {RabinSignature} sig Rabin signature result
     * @param {RabinPublicKey} pubKey Rabin public key
     * @returns {boolean} If signature is valid or not
     */
    verify(dataHex: string, sig: RabinSignature, pubKey: RabinPublicKey): boolean;
}
/**
 * convert signature to type `RabinSig` defined in `scrypt-ts-lib`
 */
export declare function toRabinSig(sig: RabinSignature): {
    s: bigint;
    padding: string;
};
/**
 * serialize signature
 */
export declare function serialize(sig: RabinSignature): {
    s: string;
    padding: string;
};
/**
 * deserialize signature
 */
export declare function deserialize(sig: {
    s: string;
    padding: string;
}): RabinSignature;
