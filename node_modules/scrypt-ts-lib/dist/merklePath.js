"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MerklePath = void 0;
const scrypt_ts_1 = require("scrypt-ts");
class MerklePath extends scrypt_ts_1.SmartContractLib {
    // According to the given leaf node and merkle path, calculate the hash of the root node of the merkle tree.
    static calcMerkleRoot(leaf, merkleProof, depth) {
        let root = leaf;
        for (let i = 0; i < depth; i++) {
            const node = merkleProof[i];
            if (node.pos != MerklePath.INVALID_NODE) {
                // s is valid
                root =
                    node.pos == MerklePath.LEFT_NODE
                        ? (0, scrypt_ts_1.Sha256)((0, scrypt_ts_1.hash256)(node.hash + root))
                        : (0, scrypt_ts_1.Sha256)((0, scrypt_ts_1.hash256)(root + node.hash));
            }
        }
        return root;
    }
    // A tx is the blocks coinbase if all nodes on its Merkle path are on the right branch.
    static isCoinbase(merkleproof, depth) {
        let res = true;
        for (let i = 0; i < depth; i++) {
            const node = merkleproof[i];
            if (node.pos != MerklePath.INVALID_NODE) {
                // node on the right
                res = res && node.pos == MerklePath.RIGHT_NODE;
            }
        }
        return res;
    }
}
exports.MerklePath = MerklePath;
MerklePath.INVALID_NODE = 0n;
MerklePath.LEFT_NODE = 1n;
MerklePath.RIGHT_NODE = 2n;
__decorate([
    (0, scrypt_ts_1.prop)()
], MerklePath, "INVALID_NODE", void 0);
__decorate([
    (0, scrypt_ts_1.prop)()
], MerklePath, "LEFT_NODE", void 0);
__decorate([
    (0, scrypt_ts_1.prop)()
], MerklePath, "RIGHT_NODE", void 0);
__decorate([
    (0, scrypt_ts_1.method)()
], MerklePath, "calcMerkleRoot", null);
__decorate([
    (0, scrypt_ts_1.method)()
], MerklePath, "isCoinbase", null);
//# sourceMappingURL=merklePath.js.map