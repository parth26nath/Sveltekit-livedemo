"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FRMath = void 0;
const scrypt_ts_1 = require("scrypt-ts");
// A fraction-based math library for high precision calculations.
class FRMath extends scrypt_ts_1.SmartContractLib {
    static add(x, y) {
        return {
            n: x.n * y.d + y.n * x.d,
            d: x.d * y.d,
        };
    }
    // Safe addition. Requires both argument denominators > 0.
    static sAdd(x, y) {
        (0, scrypt_ts_1.assert)(x.d > 0n && y.d > 0n);
        return {
            n: x.n * y.d + y.n * x.d,
            d: x.d * y.d,
        };
    }
    static sub(x, y) {
        return {
            n: x.n * y.d - y.n * x.d,
            d: x.d * y.d,
        };
    }
    // Safe substitution. Requires both argument denominators > 0.
    static sSub(x, y) {
        (0, scrypt_ts_1.assert)(x.d > 0n && y.d > 0n);
        return {
            n: x.n * y.d - y.n * x.d,
            d: x.d * y.d,
        };
    }
    static mul(x, y) {
        return {
            n: x.n * y.n,
            d: x.d * y.d,
        };
    }
    // Safe multiplication. Requires both argument denominators > 0.
    static sMul(x, y) {
        (0, scrypt_ts_1.assert)(x.d > 0n && y.d > 0n);
        return {
            n: x.n * y.n,
            d: x.d * y.d,
        };
    }
    static div(x, y) {
        return {
            n: x.n * y.d,
            d: x.d * y.n,
        };
    }
    // Safe division. Requires both argument denominators > 0 and y != 0.
    static sDiv(x, y) {
        (0, scrypt_ts_1.assert)(x.d > 0n && y.d > 0n && y.n != 0n);
        return {
            n: x.n * y.d,
            d: x.d * y.n,
        };
    }
    static abs(x) {
        return {
            n: (0, scrypt_ts_1.abs)(x.n),
            d: (0, scrypt_ts_1.abs)(x.d),
        };
    }
    // Safe absolute. Requires both argument denominators > 0.
    static sAbs(x) {
        (0, scrypt_ts_1.assert)(x.d > 0n);
        return {
            n: (0, scrypt_ts_1.abs)(x.n),
            d: x.d,
        };
    }
    static equal(x, y) {
        return FRMath.sub(x, y).n == 0n;
    }
    static sEqual(x, y) {
        return FRMath.sSub(x, y).n == 0n;
    }
    static toInt(x) {
        return x.n / x.d;
    }
    static fromInt(numerator, denominator) {
        return {
            n: numerator,
            d: denominator,
        };
    }
    static scaleUp(x, s) {
        return (x.n * s) / x.d;
    }
}
exports.FRMath = FRMath;
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "add", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sAdd", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sub", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sSub", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "mul", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sMul", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "div", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sDiv", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "abs", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sAbs", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "equal", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "sEqual", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "toInt", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "fromInt", null);
__decorate([
    (0, scrypt_ts_1.method)()
], FRMath, "scaleUp", null);
//# sourceMappingURL=fractionMath.js.map